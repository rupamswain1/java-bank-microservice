spring:
  application:
    name: "accounts"
  profiles:
    active: "default"
    #  datasource: will be fetched from spring cloud
  datasource:

    hikari:
      maximum-pool-size: "5"
      maximum-idle: "2"
      idle-timeout: "30000"
      data-source-properties:
        cachePrepStmts: "false"
  jpa:
    hibernate:
      ddl-auto: "update"
    show-sql: "true"
  config:
    import: "optional:configserver:http://localhost:8071"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    stream:
      bindings:
        sendCommunication-out-0:
          destination: send-communication
          content-type: application/json
          binder: rabbit
      binders:
        rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest
  resilience4j.circuitbreaker:
    configs:
      default:
        slidingWindowSize: 5
        failureRateThreshold: 600
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 2
  resilience4j.retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 5
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        ignoreExceptions:
          -java.lang.NullPointerException
        retryExceptions:
          -java.util.concurrent.TimeoutException
  resilience4j.ratelimiter:
    configs:
      default:
        timeoutDuration: 0
        limitRefreshPeriod: 5s
        limitForPeriod: 1

  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
    connection-timeout: 10s
logging:
  level:
    in:
      rupam:
        accounts: DEBUG
  pattern:
    level: "%5p[${spring.application.name},%X{trace_id},%X{span_id}]"
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Accounts Application"
    version: "1.0.1"
#micromeeter configuration
metrics:
  tags:
    application: ${spring.application.name}